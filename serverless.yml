service: ${env:CB_BUILD_PROJECT}-github-webhook

plugins:
  - serverless-step-functions
  - serverless-parameters
  - serverless-portable-templates
  - serverless-pseudo-parameters

custom:
  stage: dev
  github-webhook:
    githubStatusContext: codebuild/${env:CB_BUILD_PROJECT}/pr
    githubBuildEvents: pr_state
    githubBuildUsers: ""
    githubBuildComments: go codebuild go, go codebuild ci go
    cbExternalBuildspec: "false"
    cbGitRepoEnv: ""
    cbGitRefEnv: ""
    ciExtraEnvName: ""
    ciExtraEnvValue: ""
  parameters:
    CbBuildProject:
      Type: String
      Default: ${env:CB_BUILD_PROJECT}
      Description: Name of the build project that should be triggered
    GithubRepository:
      Type: String
      Default: ${env:GITHUB_REPOSITORY}
      Description: "Github repository url, eg: https://github.com/[username]/[repository]"
    GithubStatusContext:
      Type: String
      Default: ${env:GITHUB_STATUS_CONTEXT, self:custom.github-webhook.githubStatusContext}
      Description: A label used to differentiate this status from other status integrations
    GithubBuildEvents:
      Type: String
      Default: ${env:GITHUB_BUILD_EVENTS, self:custom.github-webhook.githubBuildEvents}
      Description: Comma-separated string of Github events that should initiate a build, supports "pr_state" or "pr_comment"
    GithubBuildUsers:
      Type: String
      Default: ${env:GITHUB_BUILD_USERS, self:custom.github-webhook.githubBuildUsers}
      Description: For pull request comments, a comma-separated string of users authorized to initiate a build
    GithubBuildComments:
      Type: String
      Default: ${env:GITHUB_BUILD_COMMENTS, self:custom.github-webhook.githubBuildComments}
      Description: For pull request comments, a comma-seperated string of comments that will initiate a build
    CbExternalBuildspec:
      Type: String
      Default: ${env:CB_EXTERNAL_BUILDSPEC, self:custom.github-webhook.cbExternalBuildspec}
      Description: Controls whether the sourceVersion parameter is set to the pull request and passed to the CodeBuild job. Set to true if the repo for the CodeBuild project itself is different from the repo where the webhook will be created.
    CbGitRepoEnv:
      Type: String
      Default: ${env:CB_GIT_REPO_ENV, self:custom.github-webhook.cbGitRepoEnv}
      Description: (Optional) Name of ENV variable that your CodeBuild project uses to know which repo to clone. For use with CB_EXTERNAL_BUILDSPEC.
    CbGitRefEnv:
      Type: String
      Default: ${env:CB_GIT_REF_ENV, self:custom.github-webhook.cbGitRefEnv}
      Description: (Optional) Name of ENV variable that your CodeBuild project uses to know which git ref to checkout. For use with CB_EXTERNAL_BUILDSPEC.
    SsmGithubUsername:
      Type: String
      Default: ${env:SSM_GITHUB_USERNAME}
      Description: Encrypted SSM parameter name containing the Github username, this is the user which will be displayed
    SsmGithubAccessToken:
      Type: String
      Default: ${env:SSM_GITHUB_ACCESS_TOKEN}
      Description: Encrypted SSM parameter name containing the generated Github access token
    CiExtraEnvName:
      Type: String
      Default: ${env:CI_EXTRA_ENV_NAME, self:custom.github-webhook.ciExtraEnvName}
      Description: Additional env to be added to the build job ENV when comment is 'go codebuild ci go'
    CiExtraEnvValue:
      Type: String
      Default: ${env:CI_EXTRA_ENV_VALUE, self:custom.github-webhook.ciExtraEnvValue}
      Description: Additional env value to be added to the build job ENV when comment is 'go codebuild ci go'
provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, self:custom.stage}
  versionFunctions: false
  memorySize: 128

  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - codebuild:*
      Resource: "arn:aws:codebuild:#{AWS::Region}:#{AWS::AccountId}:project/${env:CB_BUILD_PROJECT}"
    - Effect: "Allow"
      Action:
        - ssm:GetParameter
      Resource:
        - "arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter${env:SSM_GITHUB_USERNAME}"
        - "arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter${env:SSM_GITHUB_ACCESS_TOKEN}"
        - "arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/${env:SSM_GITHUB_USERNAME}"
        - "arn:aws:ssm:#{AWS::Region}:#{AWS::AccountId}:parameter/${env:SSM_GITHUB_ACCESS_TOKEN}"
    - Effect: "Allow"
      Action:
        - kms:Decrypt
      Resource: "arn:aws:kms:#{AWS::Region}:#{AWS::AccountId}:key/${env:KMS_SSM_KEYID}"

  environment:
    CB_BUILD_PROJECT:
      Ref: CbBuildProject
    GITHUB_REPOSITORY:
      Ref: GithubRepository
    GITHUB_STATUS_CONTEXT:
      Ref: GithubStatusContext
    GITHUB_BUILD_EVENTS:
      Ref: GithubBuildEvents
    GITHUB_BUILD_USERS:
      Ref: GithubBuildUsers
    GITHUB_BUILD_COMMENTS:
      Ref: GithubBuildComments
    CB_EXTERNAL_BUILDSPEC:
      Ref: CbExternalBuildspec
    CB_GIT_REPO_ENV:
      Ref: CbGitRepoEnv
    CB_GIT_REF_ENV:
      Ref: CbGitRefEnv
    SSM_GITHUB_USERNAME:
      Ref: SsmGithubUsername
    SSM_GITHUB_ACCESS_TOKEN:
      Ref: SsmGithubAccessToken
    CI_EXTRA_ENV_NAME:
      Ref: CiExtraEnvName
    CI_EXTRA_ENV_VALUE:
      Ref: CiExtraEnvValue
      
functions:
  start-build:
    handler: handler.start_build

  check-build-status:
    handler: handler.check_build_status

  build-done:
    handler: handler.build_done

  webhook-resource:
    handler: webhook.resource

resources:
  Resources:
    GithubWebhook:
      Type: Custom::GithubWebhook
      Properties:
        ServiceToken:
          Fn::GetAtt:
            - WebhookDashresourceLambdaFunction
            - Arn
        Endpoint:
          Fn::Join:
            - ""
            -
              - https://
              - Ref: "ApiGatewayRestApi"
              - .execute-api.#{AWS::Region}.amazonaws.com/${self:provider.stage}/trigger-build/

  Outputs:
    TriggerEndpoint:
      Value:
        Fn::Join:
          - ""
          -
            - https://
            - Ref: "ApiGatewayRestApi"
            - .execute-api.#{AWS::Region}.amazonaws.com/${self:provider.stage}/trigger-build/

stepFunctions:
  stateMachines:
    build-for-commit:
      events:
        - http:
            path: trigger-build
            method: POST
      definition:
        Comment: "Check for build status for the given build project, and mark it when done on GH"
        StartAt: start_build
        States:
          start_build:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:#{AWS::StackName}-start-build"
            Next: check_build_status
          wait_a_bit:
            Type: Wait
            Seconds: 5
            Next: check_build_status
          check_build_status:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:#{AWS::StackName}-check-build-status"
            Next: check_build_status_outcome
            Retry:
              - ErrorEquals: [ "States.TaskFailed" ]
                IntervalSeconds: 3
                MaxAttempts: 3
          check_build_status_outcome:
            Type: Choice
            Choices:
            - Variable: "$.build.buildComplete"
              BooleanEquals: true
              Next: build_done
            Default: wait_a_bit
          build_done:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:#{AWS::StackName}-build-done"
            End: true
